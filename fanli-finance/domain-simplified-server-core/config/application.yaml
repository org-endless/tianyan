#------------------------Endless------------------------
endless:
  version: 1.0.0-SNAPSHOT
  charset: UTF-8
#------------------------Server-------------------------
server:
  port: ${endless.server.port} # 服务端口
  tomcat:
    connection-timeout: ${endless.tomcat.connection-timeout} # 设置连接超时时间，单位为毫秒
    max-threads: ${endless.tomcat.max-threads} # 设置最大线程数
    min-spare-threads: ${endless.tomcat.min-spare-threads} # 设置最小闲置线程数
    accept-count: ${endless.tomcat.accept-count} # 设置最大请求队列数
    max-http-header-size: ${endless.tomcat.max-http-header-size} # 设置最大 HTTP 请求头大小，单位为字节
    uri-encoding: ${endless.tomcat.uri-encoding} # 设置 URI 编码格式
#------------------------Spring-------------------------
spring:
  application:
    name: endless-ddd-simplified-server
  profiles:
    active: dev
  devtools:
    restart:
      enabled: true # 热部署功能
  http:
    multipart:
      max-file-size: ${endless.http.multipart.max-file-size} # 限制单个文件的最大上传大小
      max-request-size: ${endless.http.multipart.max-request-size} # 限制整个请求的最大上传大小
  servlet:
    multipart:
      enabled: ${endless.servlet.multipart.enabled} # 启用文件上传功能
      location: ${endless.servlet.multipart.location} # 上传文件存储的临时目录
      resolve-lazily: ${endless.servlet.multipart.resolve-lazily} # 延迟解析 multipart 请求，减少内存占用
      max-file-size: ${endless.servlet.multipart.max-file-size} # 限制单个文件的最大上传大小
      max-request-size: ${endless.servlet.multipart.max-request-size} # 限制整个请求的最大上传大小
  cache:
    type: redis
  redis:
    host: ${endless.redis.host} # Redis 服务器的主机名或 IP 地址
    port: ${endless.redis.port} # Redis 服务器的端口，默认一般是 6379
    database: ${endless.redis.database} # 使用的 Redis 数据库索引，默认通常是 0
    password: ${endless.redis.password} # Redis 服务器的密码，如果启用了认证则需要
    timeout: ${endless.redis.timeout} # 连接超时时间，单位为毫秒（10秒）
    command-timeout: ${endless.redis.command-timeout} # Redis 命令的最大等待时间，单位为毫秒，避免网络延迟造成长时间等待
    ssl: ${endless.redis.ssl} # 是否启用 SSL 加密连接，如果 Redis 服务器启用了 SSL 则设置为 true
    cluster-mode: ${endless.redis.cluster-mode} # 是否启用集群模式，如果使用 Redis Cluster 则设置为 true
    lettuce:
      pool:
        min-idle: ${endless.redis.lettuce.pool.min-idle} # 连接池中最小空闲连接数
        max-idle: ${endless.redis.lettuce.pool.max-idle} # 连接池中最大空闲连接数
        max-active: ${endless.redis.lettuce.pool.max-active} # 连接池中最大活动连接数（并发连接数）
        max-wait: ${endless.redis.lettuce.pool.max-wait} # 从连接池获取连接的最大等待时间，-1 表示没有限制
    socket-options:
      keep-alive: ${endless.redis.socket-options.keep-alive} # 启用保持连接，保持连接活跃以避免频繁创建新连接
      tcp-no-delay: ${endless.redis.socket-options.tcp-no-delay} # 禁用 Nagle 算法，提升响应速度
  datasource:
    type: ${endless.datasource.type}  # 指定 Druid 数据源类型
    driver-class-name: ${endless.datasource.driver-class-name}  # 设置数据库驱动类
    url: ${endless.datasource.url} # 数据库连接 URL
    username: ${endless.datasource.username}  # 数据库用户名
    password: ${endless.datasource.password}  # 数据库密码
    druid:
      initial-size: ${endless.druid.initial-size}  # 初始化连接数
      min-idle: ${endless.druid.min-idle}  # 最小空闲连接数
      max-active: ${endless.druid.max-active}  # 最大活动连接数
      max-wait: ${endless.druid.max-wait}  # 获取连接的最大等待时间，单位为毫秒
      validation-query: ${endless.druid.validation-query}  # 连接验证查询
      test-on-borrow: ${endless.druid.test-on-borrow}  # 在获取连接时检查有效性
      test-on-return: ${endless.druid.test-on-return}  # 归还连接时进行检测
      test-while-idle: ${endless.druid.test-while-idle}  # 在空闲时检查连接有效性
      time-between-eviction-runs-millis: ${endless.druid.time-between-eviction-runs-millis}  # 运行空闲连接回收线程的时间间隔，单位为毫秒
      min-evictable-idle-time-millis: ${endless.druid.min-evictable-idle-time-millis}  # 连接最小空闲时间，超过该时间将被回收，单位为毫秒
      max-evictable-idle-time-millis: ${endless.druid.max-evictable-idle-time-millis}  # 连接最小空闲时间，超过该时间将被回收，单位为毫秒
      filters: ${endless.druid.filters}  # Druid 监控过滤器配置，开启统计和 log4j 记录
      stat-view-servlet:
        enabled: ${endless.druid.stat-view-servlet.enabled}  # 是否启用 Druid 的监控页面
      web-stat-filter:
        enabled: ${endless.druid.web-stat-filter.enabled}  # 是否启用 Druid 的 Web 统计过滤器
      filter:
        stat:
          enabled: ${endless.druid.filter.stat.enabled}  # 启用统计过滤器
          log-slow-sql: ${endless.druid.filter.stat.log-slow-sql}  # 启用慢SQL记录
          slow-sql-millis: ${endless.druid.filter.stat.slow-sql-millis}  # 记录执行时间超过1000毫秒的SQL
          merge-sql: ${endless.druid.filter.stat.merge-sql}  # 合并相似的SQL执行
        wall:
          config:
            multi-statement-allow: ${endless.druid.wall.config.multi-statement-allow}  # 允许多条语句执行
#------------------------Logging------------------------
logging:
  config: ${endless.logging.config}
#-------------------------Minio-------------------------
minio:
  endpoint: ${endless.minio.endpoint} # MinIO 服务的访问地址，包含主机名/IP和端口号
  accessKey: ${endless.minio.accessKey} # MinIO 服务的访问密钥 ID，用于身份验证
  secretKey: ${endless.minio.secretKey} # MinIO 服务的访问密钥（从配置中读取），用于身份验证
  bucket: ${endless.minio.bucket} # 默认存储桶名称（从配置中读取），用于存储数据
  # OkHttp连接池配置，用于控制与 MinIO 服务的连接管理
  connect-pool:
    max-idle: ${endless.minio.connect-pool.max-idle} # 最大空闲连接数，设置较大值可以减少频繁的连接创建和关闭
    keep-alive: ${endless.minio.connect-pool.keep-alive} # 空闲连接保活时间，单位为分钟，超过该时间未使用的连接将被关闭
    timeout: ${endless.minio.connect-pool.timeout} # 连接超时时间，单位为秒，超过该时间未能建立连接则会超时
io:
  netty:
    noUnsafe: true # 禁用 Netty 的 Unsafe 代码，提升性能
    noPreferDirect: true # 禁用 Netty 的直接缓冲区，提升性能
mybatis-plus:
  type-aliases-package: org.endless.**.mapper
